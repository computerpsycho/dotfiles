#!/usr/bin/env bash
# Automated script to get a functioning system.

maysudo=$(command -v sudo || command -v doas || true)
pacman=$(command -v pacman || true)
paru=$(command -v paru || true)

check_install() {
	local pkg=$1
	if ! pacman -Qq $pkg &>/dev/null; then
		echo "Error: Failed to install $pkg"
		exit 1
	fi
}

if [[ -n $pacman ]]; then
	pkgs=(
		git
		base-devel
		meson
		rust
		curl
		wget
		sway
		swaybg
		swayimg
		wayland-protocols
		fish
		i3blocks
		wofi
		foot
		firefox
		leafpad
        thunar
		exa
		acpi
		sysstat
		vlc
		noto-fonts-emoji
		ttf-iosevka-nerd
        wl-clipboard
        ripgrep
	)

	echo "--> Installing base packages"
	$maysudo "$pacman" -S --needed --noconfirm "${pkgs[@]}"
	for pkg in "${pkgs[@]}"; do
		check_install $pkg
	done

	# Display Manager (GDM)
	read -p "--> Install Display Manager GDM? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		echo "--> Installing GDM"
		$maysudo "$pacman" -S --needed --noconfirm gdm
		check_install gdm
		echo "Enabling GDM at boot time"
		$maysudo systemctl enable gdm
	fi

	# Install paru (for AUR packages)
	if [[ -z $paru ]]; then
		echo "--> Installing paru"
		git clone https://aur.archlinux.org/paru.git ~/paru
		cd ~/paru
		makepkg -si
		cd ..
		# Clean up
		echo "Cleaning up"
		rm -rf ~/paru
		paru=$(command -v paru)
	else
		echo "--> Paru is already installed."
	fi

	audio_pkgs=(
		pipewire
		pipewire-audio
		pipewire-alsa
		pipewire-pulse
		sof-firmware
		wireplumber
		pavucontrol
	)

	read -p "--> Install pipewire & enable pipewire services? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		echo "--> Installing pipewire packages"
		$maysudo "$pacman" -S --needed --noconfirm "${audio_pkgs[@]}"
		for pkg in "${audio_pkgs[@]}"; do
			check_install $pkg
		done

		echo "--> Enabling pipewire services"
		systemctl --user enable pipewire.service
		systemctl --user enable pipewire-pulse.service
		systemctl --user enable wireplumber
	fi

	read -p "--> Start pipewire services without rebooting? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		echo "--> Starting pipewire services"
		systemctl --user start pipewire.service
		systemctl --user start pipewire-pulse.service
		systemctl --user start wireplumber
	fi

	bluetooth_pkgs=(
		bluez
		bluez-utils
		blueman
	)

	read -p "--> Install bluetooth & enable bluetooth service? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		echo "--> Installing bluetooth packages"
		$maysudo "$pacman" -S --needed --noconfirm "${bluetooth_pkgs[@]}"
		for pkg in "${bluetooth_pkgs[@]}"; do
			check_install $pkg
		done

		echo "--> Enabling bluetooth"
		$maysudo systemctl enable bluetooth.service
		$maysudo systemctl start bluetooth.service
	fi

	aur_pkgs=(
		mullvad-vpn-bin
		lazygit
		neovim
	)

	echo "--> Installing AUR packages"
	"$paru" -S --needed --noconfirm "${aur_pkgs[@]}"
	for pkg in "${aur_pkgs[@]}"; do
		check_install $pkg
	done

	echo "--> Placing dummy config files to avoid errors"
	mkdir -p ~/.config/sway/ && cp /etc/sway/config ~/.config/sway
	mkdir -p ~/.config/foot && touch ~/.config/foot/foot.ini
	mkdir -p ~/.config/fish && touch ~/.config/fish/config.fish
	mkdir -p ~/.config/wofi && touch ~/.config/wofi/style.css
    mkdir -p ~/.config/swappy && touch ~/.config/swappy/config

	read -p "--> Change shell to fish? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		chsh -s $(which fish)
	fi

	read -p "--> Import configuration files? (y/n): " answer
	if [[ $answer =~ ^[Yy]$ ]]; then
		./configure
	fi

	echo "--> Update"
	$maysudo "$pacman" -Syu
	exit 0
fi
